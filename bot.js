const TelegramBot = require('node-telegram-bot-api');
const axios = require('axios');
const { Log, UserSettings } = require('./db');
require('dotenv').config();

const botToken = process.env.TELEGRAM_BOT_TOKEN;
const weatherApiKey = process.env.OPENWEATHERMAP_API_KEY;

const bot = new TelegramBot(botToken, { polling: true });

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
async function logRequest(userId, command, response) {
  try {
    await Log.create({ userId, command, response });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤ PostgreSQL:', error);
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ Telegram –±–æ—Ç–∞
function startBot() {
  bot.onText(/\/start/, (msg) => {
    const chatId = msg.chat.id;
    const response = '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ø–æ–≥–æ–¥—ã, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Ç–µ—Å—Ç–∞ –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ bobrAi. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /weather <–≥–æ—Ä–æ–¥> –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–≥–æ–¥–µ.';
    bot.sendMessage(chatId, response);
    logRequest(msg.from.id, '/start', response);
  });

  bot.onText(/\/weather(?:\s+(.+))?/, async (msg, match) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    const requestedCity = match[1];

    let city = requestedCity;

    try {
      if (!city) {
        const userSettings = await UserSettings.findOne({ where: { userId: userId } });

        if (userSettings && userSettings.city) {
          city = userSettings.city;
        } else {
          const response = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É\n/setcity <–≥–æ—Ä–æ–¥>.';
          bot.sendMessage(chatId, response);
          logRequest(userId, '/weather', response);
          return;
        }
      }

      const weather = await getWeather(city);
      const response = formatWeatherResponse(weather);
      bot.sendMessage(chatId, response, { parse_mode: 'Markdown' });
      logRequest(userId, `/weather ${city}`, response);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞:', error.message);
      const errorResponse = `–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–≥–æ–¥–µ:\n${error.message}`;
      bot.sendMessage(chatId, errorResponse);
      logRequest(userId, `/weather ${city}`, errorResponse);
    }
  });

  bot.onText(/\/setcity(?:\s+(.+))?/, async (msg, match) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    const city = match[1];

    if (!city) {
      const response = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥. –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:\n/setcity –ú–æ—Å–∫–≤–∞';
      bot.sendMessage(chatId, response);
      logRequest(userId, '/setcity', response);
      return;
    }

    try {
      const [userSettings, created] = await UserSettings.findOrCreate({
        where: { userId: userId },
        defaults: { city: city }
      });

      if (!created) {
        userSettings.city = city;
        await userSettings.save();
      }

      const response = `–ì–æ—Ä–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞: ${city}`;
      bot.sendMessage(chatId, response);
      logRequest(userId, `/setcity ${city}`, response);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≥–æ—Ä–æ–¥–∞:', error);
      const errorResponse = `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≥–æ—Ä–æ–¥–∞: ${error.message}`;
      bot.sendMessage(chatId, errorResponse);
      logRequest(userId, `/setcity ${city}`, errorResponse);
    }
  });

  bot.onText(/\/clearcity/, async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    try {
      const userSettings = await UserSettings.findOne({ where: { userId: userId } });
      if (userSettings) {
        await userSettings.destroy();
        const response = '–í–∞—à –≥–æ—Ä–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –±—ã–ª —É–¥–∞–ª—ë–Ω.';
        bot.sendMessage(chatId, response);
        logRequest(userId, '/clearcity', response);
      } else {
        const response = '–£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞.';
        bot.sendMessage(chatId, response);
        logRequest(userId, '/clearcity', response);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≥–æ—Ä–æ–¥–∞:', error);
      const errorResponse = `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≥–æ—Ä–æ–¥–∞: ${error.message}`;
      bot.sendMessage(chatId, errorResponse);
      logRequest(userId, '/clearcity', errorResponse);
    }
  });

  console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π...');
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async function getWeather(city) {
  const url = `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${weatherApiKey}&units=metric&lang=ru`;
  try {
    const response = await axios.get(url);
    return response.data;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ getWeather:', error.message);
    if (error.response) {
      console.error('–î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞:', error.response.data);
      console.error('–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', error.response.status);
    }
  }
}

function formatWeatherResponse(weather) {
  return `
*–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ ${weather.name}:*

üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: ${weather.main.temp}¬∞C
üîÜ –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: ${weather.main.feels_like}¬∞C
‚òÅÔ∏è –ü–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è: ${weather.weather[0].description}
üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: ${weather.main.humidity}%
üí® –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: ${weather.wind.speed} –º/—Å

_–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Ç–µ—Å—Ç–∞ –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ bobrAi._
  `;
}

module.exports = { startBot };